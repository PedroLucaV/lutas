// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Competidor {
  id             Int      @id @default(autoincrement())
  nome           String
  telefone       String
  email          String   @unique
  senha          String
  endereco       String
  cidade         String
  estado         String
  data_nascimento DateTime
  categoria      String
  fotoCompetidor String
  cpf            String
  idade          Int
  genero         String
  graduacao      String
  peso           Float
  equipe         String
  equipeImg      String?
  professor      String
  responsavel    String?
  cpfResp        String?
  fotoResp       String?
  kimono         String   @default("Branco")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relacionamento com as lutas
  lutas1        Luta[] @relation("LutaCompetidor1")
  lutas2        Luta[] @relation("LutaCompetidor2")
  lutasVencedor Luta[] @relation("LutaVencedor")
}

model Inscritos {
  id             Int      @id @default(autoincrement())
  nome           String
  telefone       String
  email          String   @unique
  senha          String
  endereco       String
  cidade         String
  estado         String
  data_nascimento DateTime
  categoria      String
  fotoCompetidor String
  cpf            String
  idade          Int
  genero         String
  graduacao      String
  peso           Float
  equipe         String
  equipeImg      String?
  professor      String
  responsavel    String?
  cpfResp        String?
  fotoResp       String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

}

model Luta {
  id             Int          @id @default(autoincrement())
  categoria      String
  fase           String
  competidor1Id  Int? 
  competidor2Id  Int?
  vencedorId     Int?
  areaId         Int?
  area           Area?        @relation(fields: [areaId], references: [id])

  tempo          Int?
  pontos1        Int?
  pontos2        Int?
  vantagens1     Int?
  vantagens2     Int?
  faltas1        Int?
  faltas2        Int?
  ativa          Boolean?     @default(false)

  // Novos campos: Pontuação detalhada por tipo
  montada1       Int?         @default(0)
  montada2       Int?         @default(0)
  passagem1      Int?         @default(0)
  passagem2      Int?         @default(0)
  raspagem1      Int?         @default(0)
  raspagem2      Int?         @default(0)

  competidor1    Competidor?  @relation("LutaCompetidor1", fields: [competidor1Id], references: [id])
  competidor2    Competidor?  @relation("LutaCompetidor2", fields: [competidor2Id], references: [id])
  vencedor       Competidor?  @relation("LutaVencedor", fields: [vencedorId], references: [id])

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}


model Contas {
  id             String   @id @default(uuid())
  nome           String
  email          String
  telefone       String
  cpf            String
  senha          String
  evento         String?
  role           Role     @default(USER)
}

model Area {
  id         Int     @id @default(autoincrement())
  nome       String
  especial   Boolean @default(false) // true = só finais
  lutas      Luta[]
}

enum Role {
  USER
  ADMIN
  EVENT_MANAGER
}